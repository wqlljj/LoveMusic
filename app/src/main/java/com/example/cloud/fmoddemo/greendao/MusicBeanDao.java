package com.example.cloud.fmoddemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.cloud.fmoddemo.bean.MusicBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MUSIC_BEAN".
*/
public class MusicBeanDao extends AbstractDao<MusicBean, Long> {

    public static final String TABLENAME = "MUSIC_BEAN";

    /**
     * Properties of entity MusicBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property MusicPath = new Property(1, String.class, "musicPath", false, "MUSIC_PATH");
        public final static Property Singer = new Property(2, String.class, "singer", false, "SINGER");
        public final static Property MusicName = new Property(3, String.class, "musicName", false, "MUSIC_NAME");
        public final static Property Current = new Property(4, int.class, "current", false, "CURRENT");
        public final static Property Len = new Property(5, int.class, "len", false, "LEN");
    }


    public MusicBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MusicBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MUSIC_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MUSIC_PATH\" TEXT," + // 1: musicPath
                "\"SINGER\" TEXT," + // 2: singer
                "\"MUSIC_NAME\" TEXT," + // 3: musicName
                "\"CURRENT\" INTEGER NOT NULL ," + // 4: current
                "\"LEN\" INTEGER NOT NULL );"); // 5: len
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MUSIC_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MusicBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String musicPath = entity.getMusicPath();
        if (musicPath != null) {
            stmt.bindString(2, musicPath);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(3, singer);
        }
 
        String musicName = entity.getMusicName();
        if (musicName != null) {
            stmt.bindString(4, musicName);
        }
        stmt.bindLong(5, entity.getCurrent());
        stmt.bindLong(6, entity.getLen());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MusicBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String musicPath = entity.getMusicPath();
        if (musicPath != null) {
            stmt.bindString(2, musicPath);
        }
 
        String singer = entity.getSinger();
        if (singer != null) {
            stmt.bindString(3, singer);
        }
 
        String musicName = entity.getMusicName();
        if (musicName != null) {
            stmt.bindString(4, musicName);
        }
        stmt.bindLong(5, entity.getCurrent());
        stmt.bindLong(6, entity.getLen());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MusicBean readEntity(Cursor cursor, int offset) {
        MusicBean entity = new MusicBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // musicPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // singer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // musicName
            cursor.getInt(offset + 4), // current
            cursor.getInt(offset + 5) // len
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MusicBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMusicPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSinger(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMusicName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrent(cursor.getInt(offset + 4));
        entity.setLen(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MusicBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MusicBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MusicBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
